<launch>
    <arg name="launch_cruncher"         default="true"/>
    <arg name="launch_monitor"          default="true"/>
    <arg name="launch_plotter"          default="true"/>
    <arg name="launch_webserver"        default="true"/>
    <arg name="launch_throttle"         default="true"/>
    <arg name="launch_aggregator"       default="true"/>
    <arg name="launch_ekf"              default="false"/> <!-- use at own risk --> 

    <arg name="port"                    default="5006"/>
    <arg name="address"                 default="0.0.0.0"/>

    <arg name="dataset_name"            default="s2_ccw_o0_e0_a0"/>
    <!-- s1_ccw_o0_e0_a0        s1_ccw_o0_e0_a1         s1_ccw_o0_e0_a2 -->
    <!-- s2_ccw_o0_e0_a0        s2_ccw_o0_e1_a0         s2_ccw_o1_e0_a0 -->

    <arg name="database_path"           default="$(find aarapsi_robot_pack)/data/compressed_sets"/>
    <arg name="ref_root"                default="$(find aarapsi_robot_pack)/data/$(arg dataset_name)/"/>
    <arg name="ref_imgs_path"           default="[$(arg ref_root)forward,$(arg ref_root)left,$(arg ref_root)right,$(arg ref_root)panorama]"/>
    <arg name="ref_odom_path"           default="$(arg ref_root)odometry.csv"/>

    <arg name="cal_qry_dataset_name"    default="s1_cw_o0_e0_a0"/>
    <arg name="cal_ref_dataset_name"    default="s2_cw_o0_e1_a0"/>
    <!-- s1_cw_o0_e0_a0        s2_cw_o0_e1_a0 -->

    <arg name="data_topic"              default="/data/img_odom"/>
    <arg name="odom_topic"              default="None"/>
    
    <arg name="rate"                    default="12.0"/>
    <arg name="cruncher_node_name"      default="vpr_cruncher"/>
    <arg name="monitor_node_name"       default="vpr_monitor"/>
    <arg name="plotter_node_name"       default="vpr_plotter"/>
    <arg name="anon"                    default="True"/>
    <arg name="reset"                   default="True"/>

    <arg name="img_dims"                default="(64,64)"/>
    <arg name="ft_type"                 default="1"/>  <!-- 1: RAW, 2: PATCHNORM, 3: NETVLAD, 4: HYBRIDNET -->

    <arg name="tol_mode"                default="2"/>
    <arg name="tol_thresh"              default="1.0"/>

    <arg name="time_history_length"     default="20"/>
    <arg name="icon_info"               default="(50,20)"/>
    <arg name="namespace"               default="/vpr_nodes"/>
    <arg name="frame_id"                default="map"/>

    <arg name="cruncher_compress_in"    default="True"/>
    <arg name="cruncher_compress_out"   default="True"/>
    <arg name="cruncher_do_plotting"    default="False"/>
    <arg name="cruncher_make_images"    default="True"/>
    <arg name="cruncher_groundtruth"    default="True"/>
    <arg name="cruncher_make_labels"    default="True"/>

    <arg name="monitor_compress_in"     default="True"/>
    <arg name="monitor_compress_out"    default="True"/>
    <arg name="print_prediction"        default="False"/>

    <arg name="plotter_compress_in"     default="True"/>

    <arg name="log_level"               default="2"/> <!-- 1: Debug, 2: Info, 4: Warn, 8: Error, 16: Fatal -->

    <node if="$(arg launch_webserver)" pkg="web_video_server" type="web_video_server" name="web_video_server" output="screen"/>
    
    <!-- Main VPR Pipeline -->
    <group ns="$(arg namespace)">
        <node if="$(arg launch_cruncher)" pkg="aarapsi_robot_pack" type="vpr_all_in_one.py" name="$(arg cruncher_node_name)" output="screen" 
            args="$(arg dataset_name) $(arg database_path) $(arg ref_imgs_path) $(arg ref_odom_path) $(arg data_topic)
                -o $(arg odom_topic) -Ci $(arg cruncher_compress_in) -Co $(arg cruncher_compress_out) -P $(arg cruncher_do_plotting) -I $(arg cruncher_make_images) -G $(arg cruncher_groundtruth) -L $(arg cruncher_make_labels)
                -r $(arg rate) -l $(arg time_history_length) -i $(arg img_dims) -F $(arg ft_type) 
                -t $(arg tol_mode) -T $(arg tol_thresh) -p $(arg icon_info) 
                -N $(arg cruncher_node_name) -a $(arg anon) -n $(arg namespace) -f $(arg frame_id) -V $(arg log_level) -R $(arg reset)">
        </node>
        
        <node if="$(arg launch_monitor)" pkg="aarapsi_robot_pack" type="vpr_monitor.py" name="$(arg monitor_node_name)" output="screen" 
            args="$(arg cal_qry_dataset_name) $(arg cal_ref_dataset_name) $(arg database_path)
                -Ci $(arg monitor_compress_in) -Co $(arg monitor_compress_out)
                -r $(arg rate) -i $(arg img_dims) -F $(arg ft_type) -p $(arg print_prediction)
                -N $(arg monitor_node_name) -a $(arg anon) -n $(arg namespace) -V $(arg log_level) -R $(arg reset)">
        </node>
        
        <node if="$(arg launch_plotter)" pkg="aarapsi_robot_pack" type="vpr_bokeh_server.py" name="$(arg plotter_node_name)" output="screen" 
            args="$(arg dataset_name) $(arg database_path) -F $(arg ft_type) 
                -Ci $(arg plotter_compress_in) -r $(arg rate) -i $(arg img_dims)
                -N $(arg plotter_node_name) -a $(arg anon) -n $(arg namespace) -f $(arg frame_id)
                -P $(arg port) -A $(arg address) -V $(arg log_level) -R $(arg reset)">
        </node>
    </group>

    <!-- Camera Topic Throttling Node: -->
    <group if="$(arg launch_throttle)">
        <arg name="tt_node_name"   value="throttle"/>
        <arg name="tt_rate"        value="10.0"/>
        <arg name="tt_mode"        value="1"/>
        <arg name="tt_img_dims"    value="(64,64)"/>

        <node pkg="aarapsi_robot_pack" type="throttle.py" name="$(arg tt_node_name)"
                args="-N $(arg tt_node_name) -r $(arg tt_rate) -a False -m $(arg tt_mode) -V $(arg log_level)
                        -i $(arg tt_img_dims)" />
    </group>

    <!-- Image+Odom Aggregation Node: -->
    <group if="$(arg launch_aggregator)">
        <arg name="ioa_node_name"   value="img_odom_agg"/>
        <arg name="ioa_rate"        value="10.0"/>
        <arg name="ioa_compress"    value="True"/>
        <arg name="ioa_img_topic"   value="/occam/image0"/>
        <arg name="ioa_odom_topic"  value="/odom/filtered"/>
        <arg name="ioa_pub_topic"   value="/data/img_odom"/>

        <node pkg="aarapsi_robot_pack" type="image_odom_aggregator.py" name="$(arg ioa_node_name)" 
                args="-N $(arg ioa_node_name) -r $(arg ioa_rate) -a False -C $(arg ioa_compress) -V $(arg log_level)
                        --img-topic $(arg ioa_img_topic) --odom-topic $(arg ioa_odom_topic) --pub-topic $(arg ioa_pub_topic)" />
    </group>

    <!-- VPR EKF -->
    <group if="$(arg launch_ekf)">
        <node pkg="robot_localization" type="ekf_localization_node" name="vpr_ekf" clear_params="true">
            <rosparam command="load" file="$(find aarapsi_robot_pack)/cfg/vpr_ekf.yaml"/>
            <remap from="odometry/filtered" to="/vpr_nodes/vpr_odom/filtered"/>
            <remap from="/diagnostics" to="/diagnostics/vpr_ekf"/>
        </node>
    </group>


</launch>